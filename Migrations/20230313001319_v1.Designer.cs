// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace dotnet_assignment.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230313001319_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Model.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Model.Employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Companyid")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("employeeTypeid")
                        .HasColumnType("int");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("monthlySalary")
                        .HasColumnType("float");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Companyid");

                    b.HasIndex("employeeTypeid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Model.EmployeeMeeting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("employeeid")
                        .HasColumnType("int");

                    b.Property<int?>("meetingid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employeeid");

                    b.HasIndex("meetingid");

                    b.ToTable("EmployeeMeetings");
                });

            modelBuilder.Entity("Model.EmployeeType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Model.Meeting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Model.Task", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("assigneeid")
                        .HasColumnType("int");

                    b.Property<string>("descrption")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("done")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("assigneeid");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Model.Employee", b =>
                {
                    b.HasOne("Model.Company", null)
                        .WithMany("employee")
                        .HasForeignKey("Companyid");

                    b.HasOne("Model.EmployeeType", "employeeType")
                        .WithMany()
                        .HasForeignKey("employeeTypeid");

                    b.Navigation("employeeType");
                });

            modelBuilder.Entity("Model.EmployeeMeeting", b =>
                {
                    b.HasOne("Model.Employee", "employee")
                        .WithMany("employeeMeeting")
                        .HasForeignKey("employeeid");

                    b.HasOne("Model.Meeting", "meeting")
                        .WithMany("EmployeeMeetings")
                        .HasForeignKey("meetingid");

                    b.Navigation("employee");

                    b.Navigation("meeting");
                });

            modelBuilder.Entity("Model.Task", b =>
                {
                    b.HasOne("Model.Employee", "assignee")
                        .WithMany()
                        .HasForeignKey("assigneeid");

                    b.Navigation("assignee");
                });

            modelBuilder.Entity("Model.Company", b =>
                {
                    b.Navigation("employee");
                });

            modelBuilder.Entity("Model.Employee", b =>
                {
                    b.Navigation("employeeMeeting");
                });

            modelBuilder.Entity("Model.Meeting", b =>
                {
                    b.Navigation("EmployeeMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
